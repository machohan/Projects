All files in four fours directory should be stored in a hash and any user except administrator/root should not be allowed to trace through file system in any current (e.g dev) or future directories inside and including www directory where four fours web application's files are stored. 

Storing files in hash format will make it difficult for hackers to understand the structure of web application and schema of database. During our course to secure web application, we discovered that it is possible to trace through file system using URL (or canonical naming) and therefore it is crucial that we must have proper permission on files and directories. 

We discovered that directory www is read and executable by all. Directories and files inside and including www directory is owned by root. This directory permission should be set to 701. Any files and directories(except fourFours) in /var/www should have permission set to 700. Any irrelevant directories such as shellshocked and files (e.g index.html) must not be stored in www. Any related and relevant files in fourfours directory should have permission set to 604.

On the other hand, unless the web application is fully protected against any code injection, it is possible for hacker to execute given commands using exec functions from languages such as php and javascript. To defend against this exploit, we must store any critical and confidential information in hash format and must not give permission to world users to change any file or directory if they are not required to. For this reason, we must maintain right permissions on all directories and files. Any access of file to the hacker can modify them resulting in loss of data and possibly denial of service. 

Also, database credentials should never be hard coded in web application such as in index.php rather these credentials should be read from another file. To defend against intrusion, we must have policy on user inputs including usernames and passwords. There are two occasions where four fours web applications requires input from a user. First to ask for login credentials and second to enter expressions. We can build a white list for each type of inputs. For username and password, we can restrict to accept only alphanumeric characters and combination of capital and small letters and reject all others and similarly for expressions we should only accept brackets, numbers and mathematical operators (* / - + ^ sqrt). We should also validate a value of each expression before storing it and give an error message if expression does not evaluate to correct number. For example, for 3, if the user entered 9/4 we should reject it. In a database we must store user information securely and hashing mush be used to store passwords. People often use same account details to create new accounts on different websites. We must not become a victim of violating data protection act incase our users' information leaks out.

To increase difficulty for hacker to obtain all web application code from one file index.php, several functions/components of four fours web application has been extracted to other files. This increases protection against code leaking out to third part as code can be placed on different servers which reduces probability of hacker accessing all code at once. On the other hand to handle error reporting, error_reporting(0); is added to each php file. This is to not display any information that hacker could use to hack into the system such as absolute path to index file when it fails. Prepared statements have been fixed to defend against injection. To prevent cross site scripting as well as CSRF, a php function addslashes() is being used to sanitize user inputs. We noted that unset($_SESSION) only destroys single variable and this makes the hacker to steal a session using URL since most $_SESSION variables are still alive even when user logs out and closes the browser. This problem has been fixed using session_destroy() function to destroy all session data. Another fix was to not to display user actions, expressionId, accountId etc on a URL. This problem was fixed using javascript.

NOTE: fixed index.php is submitted with name of index_fixed.php with all other files.